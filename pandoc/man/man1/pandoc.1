.TH PANDOC 1 "July 30, 2011" "Pandoc"
.SH NAME
pandoc - general markup converter
.SH SYNOPSIS
.PP
pandoc [\f[I]options\f[]] [\f[I]input-file\f[]]...
.SH DESCRIPTION
.PP
Pandoc is a Haskell library for converting from one markup format to
another, and a command-line tool that uses this library.
It can read markdown and (subsets of) Textile, reStructuredText, HTML,
and LaTeX; and it can write plain text, markdown, reStructuredText,
HTML, LaTeX, ConTeXt, RTF, DocBook XML, OpenDocument XML, ODT, GNU
Texinfo, MediaWiki markup, EPUB, Textile, groff man pages, Emacs
Org-Mode, and Slidy or S5 HTML slide shows.
.PP
Pandoc\[aq]s enhanced version of markdown includes syntax for footnotes,
tables, flexible ordered lists, definition lists, delimited code blocks,
superscript, subscript, strikeout, title blocks, automatic tables of
contents, embedded LaTeX math, citations, and markdown inside HTML block
elements.
(These enhancements, described below under Pandoc\[aq]s markdown, can be
disabled using the \f[C]--strict\f[] option.)
.PP
In contrast to most existing tools for converting markdown to HTML,
which use regex substitutions, Pandoc has a modular design: it consists
of a set of readers, which parse text in a given format and produce a
native representation of the document, and a set of writers, which
convert this native representation into a target format.
Thus, adding an input or output format requires only adding a reader or
writer.
.SS Using Pandoc
.PP
If no \f[I]input-file\f[] is specified, input is read from
\f[I]stdin\f[].
Otherwise, the \f[I]input-files\f[] are concatenated (with a blank line
between each) and used as input.
Output goes to \f[I]stdout\f[] by default (though output to
\f[I]stdout\f[] is disabled for the \f[C]odt\f[] and \f[C]epub\f[]
output formats).
For output to a file, use the \f[C]-o\f[] option:
.IP
.nf
\f[C]
pandoc\ -o\ output.html\ input.txt
\f[]
.fi
.PP
Instead of a file, an absolute URI may be given.
In this case pandoc will fetch the content using HTTP:
.IP
.nf
\f[C]
pandoc\ -f\ html\ -t\ markdown\ http://www.fsf.org
\f[]
.fi
.PP
If multiple input files are given, \f[C]pandoc\f[] will concatenate them
all (with blank lines between them) before parsing.
.PP
The format of the input and output can be specified explicitly using
command-line options.
The input format can be specified using the \f[C]-r/--read\f[] or
\f[C]-f/--from\f[] options, the output format using the
\f[C]-w/--write\f[] or \f[C]-t/--to\f[] options.
Thus, to convert \f[C]hello.txt\f[] from markdown to LaTeX, you could
type:
.IP
.nf
\f[C]
pandoc\ -f\ markdown\ -t\ latex\ hello.txt
\f[]
.fi
.PP
To convert \f[C]hello.html\f[] from html to markdown:
.IP
.nf
\f[C]
pandoc\ -f\ html\ -t\ markdown\ hello.html
\f[]
.fi
.PP
Supported output formats are listed below under the \f[C]-t/--to\f[]
option.
Supported input formats are listed below under the \f[C]-f/--from\f[]
option.
Note that the \f[C]rst\f[], \f[C]textile\f[], \f[C]latex\f[], and
\f[C]html\f[] readers are not complete; there are some constructs that
they do not parse.
.PP
If the input or output format is not specified explicitly,
\f[C]pandoc\f[] will attempt to guess it from the extensions of the
input and output filenames.
Thus, for example,
.IP
.nf
\f[C]
pandoc\ -o\ hello.tex\ hello.txt
\f[]
.fi
.PP
will convert \f[C]hello.txt\f[] from markdown to LaTeX.
If no output file is specified (so that output goes to \f[I]stdout\f[]),
or if the output file\[aq]s extension is unknown, the output format will
default to HTML.
If no input file is specified (so that input comes from \f[I]stdin\f[]),
or if the input files\[aq] extensions are unknown, the input format will
be assumed to be markdown unless explicitly specified.
.PP
Pandoc uses the UTF-8 character encoding for both input and output.
If your local character encoding is not UTF-8, you should pipe input and
output through \f[C]iconv\f[]:
.IP
.nf
\f[C]
iconv\ -t\ utf-8\ input.txt\ |\ pandoc\ |\ iconv\ -f\ utf-8
\f[]
.fi
.SH OPTIONS
.TP
.B \f[C]-f\f[] \f[I]FORMAT\f[], \f[C]-r\f[] \f[I]FORMAT\f[],
\f[C]--from=\f[]\f[I]FORMAT\f[], \f[C]--read=\f[]\f[I]FORMAT\f[]
Specify input format.
\f[I]FORMAT\f[] can be \f[C]native\f[] (native Haskell), \f[C]json\f[]
(JSON version of native AST), \f[C]markdown\f[] (markdown),
\f[C]textile\f[] (Textile), \f[C]rst\f[] (reStructuredText),
\f[C]html\f[] (HTML), or \f[C]latex\f[] (LaTeX).
If \f[C]+lhs\f[] is appended to \f[C]markdown\f[], \f[C]rst\f[], or
\f[C]latex\f[], the input will be treated as literate Haskell source:
see Literate Haskell support, below.
.RS
.RE
.TP
.B \f[C]-t\f[] \f[I]FORMAT\f[], \f[C]-w\f[] \f[I]FORMAT\f[],
\f[C]--to=\f[]\f[I]FORMAT\f[], \f[C]--write=\f[]\f[I]FORMAT\f[]
Specify output format.
\f[I]FORMAT\f[] can be \f[C]native\f[] (native Haskell), \f[C]json\f[]
(JSON version of native AST), \f[C]plain\f[] (plain text),
\f[C]markdown\f[] (markdown), \f[C]rst\f[] (reStructuredText),
\f[C]html\f[] (HTML), \f[C]latex\f[] (LaTeX), \f[C]context\f[]
(ConTeXt), \f[C]man\f[] (groff man), \f[C]mediawiki\f[] (MediaWiki
markup), \f[C]textile\f[] (Textile), \f[C]org\f[] (Emacs Org-Mode),
\f[C]texinfo\f[] (GNU Texinfo), \f[C]docbook\f[] (DocBook XML),
\f[C]opendocument\f[] (OpenDocument XML), \f[C]odt\f[] (OpenOffice text
document), \f[C]epub\f[] (EPUB book), \f[C]slidy\f[] (Slidy HTML and
javascript slide show), \f[C]s5\f[] (S5 HTML and javascript slide show),
or \f[C]rtf\f[] (rich text format).
Note that \f[C]odt\f[] and \f[C]epub\f[] output will not be directed to
\f[I]stdout\f[]; an output filename must be specified using the
\f[C]-o/--output\f[] option.
If \f[C]+lhs\f[] is appended to \f[C]markdown\f[], \f[C]rst\f[],
\f[C]latex\f[], or \f[C]html\f[], the output will be rendered as
literate Haskell source: see Literate Haskell support, below.
.RS
.RE
.TP
.B \f[C]-s\f[], \f[C]--standalone\f[]
Produce output with an appropriate header and footer (e.g.
a standalone HTML, LaTeX, or RTF file, not a fragment).
.RS
.RE
.TP
.B \f[C]-o\f[] \f[I]FILE\f[], \f[C]--output=\f[]\f[I]FILE\f[]
Write output to \f[I]FILE\f[] instead of \f[I]stdout\f[].
If \f[I]FILE\f[] is \f[C]-\f[], output will go to \f[I]stdout\f[].
(Exception: if the output format is \f[C]odt\f[] or \f[C]epub\f[],
output to stdout is disabled.)
.RS
.RE
.TP
.B \f[C]-p\f[], \f[C]--preserve-tabs\f[]
Preserve tabs instead of converting them to spaces (the default).
.RS
.RE
.TP
.B \f[C]--tab-stop=\f[]\f[I]NUMBER\f[]
Specify the number of spaces per tab (default is 4).
.RS
.RE
.TP
.B \f[C]--strict\f[]
Use strict markdown syntax, with no pandoc extensions or variants.
When the input format is HTML, this means that constructs that have no
equivalents in standard markdown (e.g.
definition lists or strikeout text) will be parsed as raw HTML.
.RS
.RE
.TP
.B \f[C]--normalize\f[]
Normalize the document after reading: merge adjacent \f[C]Str\f[] or
\f[C]Emph\f[] elements, for example, and remove repeated
\f[C]Space\f[]s.
.RS
.RE
.TP
.B \f[C]--reference-links\f[]
Use reference-style links, rather than inline links, in writing markdown
or reStructuredText.
By default inline links are used.
.RS
.RE
.TP
.B \f[C]-R\f[], \f[C]--parse-raw\f[]
Parse untranslatable HTML codes and LaTeX environments as raw HTML or
LaTeX, instead of ignoring them.
Affects only HTML and LaTeX input.
Raw HTML can be printed in markdown, reStructuredText, HTML, Slidy, and
S5 output; raw LaTeX can be printed in markdown, reStructuredText,
LaTeX, and ConTeXt output.
The default is for the readers to omit untranslatable HTML codes and
LaTeX environments.
(The LaTeX reader does pass through untranslatable LaTeX
\f[I]commands\f[], even if \f[C]-R\f[] is not specified.)
.RS
.RE
.TP
.B \f[C]-S\f[], \f[C]--smart\f[]
Produce typographically correct output, converting straight quotes to
curly quotes, \f[C]---\f[] and \f[C]--\f[] to dashes, ande \f[C]...\f[]
to ellipses.
Nonbreaking spaces are inserted after certain abbreviations, such as
"Mr." (Note: This option is significant only when the input format is
\f[C]markdown\f[] or \f[C]textile\f[].
It is selected automatically when the input format is \f[C]textile\f[]
or the output format is \f[C]latex\f[] or \f[C]context\f[].)
.RS
.RE
.TP
.B \f[C]-5\f[], \f[C]--html5\f[]
Produce HTML5 instead of HTML4.
This option has no effect for writers other than \f[C]html\f[].
.RS
.RE
.TP
.B \f[C]-m\f[] [\f[I]URL\f[]], \f[C]--latexmathml\f[][=\f[I]URL\f[]]
Use the LaTeXMathML script to display embedded TeX math in HTML output.
To insert a link to a local copy of the \f[C]LaTeXMathML.js\f[] script,
provide a \f[I]URL\f[].
If no \f[I]URL\f[] is provided, the contents of the script will be
inserted directly into the HTML header, preserving portability at the
price of efficiency.
If you plan to use math on several pages, it is much better to link to a
copy of the script, so it can be cached.
.RS
.RE
.TP
.B \f[C]--mathml\f[][=\f[I]URL\f[]]
Convert TeX math to MathML.
In standalone mode, a small javascript (or a link to such a script if a
\f[I]URL\f[] is supplied) will be inserted that allows the MathML to be
viewed on some browsers.
.RS
.RE
.TP
.B \f[C]--jsmath\f[][=\f[I]URL\f[]]
Use jsMath to display embedded TeX math in HTML output.
The \f[I]URL\f[] should point to the jsMath load script (e.g.
\f[C]jsMath/easy/load.js\f[]); if provided, it will be linked to in the
header of standalone HTML documents.
If a \f[I]URL\f[] is not provided, no link to the jsMath load script
will be inserted; it is then up to the author to provide such a link in
the HTML template.
.RS
.RE
.TP
.B \f[C]--mathjax\f[][=\f[I]URL\f[]]
Use MathJax to display embedded TeX math in HTML output.
The \f[I]URL\f[] should point to the \f[C]MathJax.js\f[] load script.
If a \f[I]URL\f[] is not provided, a link to the MathJax CDN will be
inserted.
.RS
.RE
.TP
.B \f[C]--gladtex\f[]
Enclose TeX math in \f[C]<eq>\f[] tags in HTML output.
These can then be processed by gladTeX to produce links to images of the
typeset formulas.
.RS
.RE
.TP
.B \f[C]--mimetex\f[][=\f[I]URL\f[]]
Render TeX math using the mimeTeX CGI script.
If \f[I]URL\f[] is not specified, it is assumed that the script is at
\f[C]/cgi-bin/mimetex.cgi\f[].
.RS
.RE
.TP
.B \f[C]--webtex\f[][=\f[I]URL\f[]]
Render TeX formulas using an external script that converts TeX formulas
to images.
The formula will be concatenated with the URL provided.
If \f[I]URL\f[] is not specified, the Google Chart API will be used.
.RS
.RE
.TP
.B \f[C]-i\f[], \f[C]--incremental\f[]
Make list items in Slidy or S5 display incrementally (one by one).
The default is for lists to be displayed all at once.
.RS
.RE
.TP
.B \f[C]--offline\f[]
Include all the CSS and javascript needed for a Slidy or S5 slide show
in the output, so that the slide show will work even when no internet
connection is available.
.RS
.RE
.TP
.B \f[C]--chapters\f[]
Treat top-level headers as chapters in LaTeX, ConTeXt, and DocBook
output.
.RS
.RE
.TP
.B \f[C]-N\f[], \f[C]--number-sections\f[]
Number section headings in LaTeX, ConTeXt, or HTML output.
By default, sections are not numbered.
.RS
.RE
.TP
.B \f[C]--listings\f[]
Use listings package for LaTeX code blocks
.RS
.RE
.TP
.B \f[C]--section-divs\f[]
Wrap sections in \f[C]<div>\f[] tags (or \f[C]<section>\f[] tags in
HTML5), and attach identifiers to the enclosing \f[C]<div>\f[] (or
\f[C]<section>\f[]) rather than the header itself.
See Section identifiers, below.
.RS
.RE
.TP
.B \f[C]--no-wrap\f[]
Disable text wrapping in output.
By default, text is wrapped appropriately for the output format.
.RS
.RE
.TP
.B \f[C]--columns\f[]=\f[I]NUMBER\f[]
Specify length of lines in characters (for text wrapping).
.RS
.RE
.TP
.B \f[C]--ascii\f[]
Use only ascii characters in output.
Currently supported only for HTML output (which uses numerical entities
instead of UTF-8 when this option is selected).
.RS
.RE
.TP
.B \f[C]--email-obfuscation=\f[]\f[I]none|javascript|references\f[]
Specify a method for obfuscating \f[C]mailto:\f[] links in HTML
documents.
\f[I]none\f[] leaves \f[C]mailto:\f[] links as they are.
\f[I]javascript\f[] obfuscates them using javascript.
\f[I]references\f[] obfuscates them by printing their letters as decimal
or hexadecimal character references.
If \f[C]--strict\f[] is specified, \f[I]references\f[] is used
regardless of the presence of this option.
.RS
.RE
.TP
.B \f[C]--id-prefix\f[]=\f[I]STRING\f[]
Specify a prefix to be added to all automatically generated identifiers
in HTML output.
This is useful for preventing duplicate identifiers when generating
fragments to be included in other pages.
.RS
.RE
.TP
.B \f[C]--indented-code-classes=\f[]\f[I]CLASSES\f[]
Specify classes to use for indented code blocks--for example,
\f[C]perl,numberLines\f[] or \f[C]haskell\f[].
Multiple classes may be separated by spaces or commas.
.RS
.RE
.TP
.B \f[C]--toc\f[], \f[C]--table-of-contents\f[]
Include an automatically generated table of contents (or, in the case of
\f[C]latex\f[], \f[C]context\f[], and \f[C]rst\f[], an instruction to
create one) in the output document.
This option has no effect on \f[C]man\f[], \f[C]docbook\f[],
\f[C]slidy\f[], or \f[C]s5\f[] output.
.RS
.RE
.TP
.B \f[C]--base-header-level=\f[]\f[I]NUMBER\f[]
Specify the base level for headers (defaults to 1).
.RS
.RE
.TP
.B \f[C]--template=\f[]\f[I]FILE\f[]
Use \f[I]FILE\f[] as a custom template for the generated document.
Implies \f[C]--standalone\f[].
See Templates below for a description of template syntax.
If no extension is specified, an extension corresponding to the writer
will be added, so that \f[C]--template=special\f[] looks for
\f[C]special.html\f[] for HTML output.
If the template is not found, pandoc will search for it in the user data
directory (see \f[C]--data-dir\f[]).
If this option is not used, a default template appropriate for the
output format will be used (see \f[C]-D/--print-default-template\f[]).
.RS
.RE
.TP
.B \f[C]-V\f[] \f[I]KEY=VAL\f[], \f[C]--variable=\f[]\f[I]KEY:VAL\f[]
Set the template variable \f[I]KEY\f[] to the value \f[I]VAL\f[] when
rendering the document in standalone mode.
This is generally only useful when the \f[C]--template\f[] option is
used to specify a custom template, since pandoc automatically sets the
variables used in the default templates.
.RS
.RE
.TP
.B \f[C]-c\f[] \f[I]URL\f[], \f[C]--css=\f[]\f[I]URL\f[]
Link to a CSS style sheet.
.RS
.RE
.TP
.B \f[C]-H\f[] \f[I]FILE\f[], \f[C]--include-in-header=\f[]\f[I]FILE\f[]
Include contents of \f[I]FILE\f[], verbatim, at the end of the header.
This can be used, for example, to include special CSS or javascript in
HTML documents.
This option can be used repeatedly to include multiple files in the
header.
They will be included in the order specified.
Implies \f[C]--standalone\f[].
.RS
.RE
.TP
.B \f[C]-B\f[] \f[I]FILE\f[],
\f[C]--include-before-body=\f[]\f[I]FILE\f[]
Include contents of \f[I]FILE\f[], verbatim, at the beginning of the
document body (e.g.
after the \f[C]<body>\f[] tag in HTML, or the \f[C]\\begin{document}\f[]
command in LaTeX).
This can be used to include navigation bars or banners in HTML
documents.
This option can be used repeatedly to include multiple files.
They will be included in the order specified.
Implies \f[C]--standalone\f[].
.RS
.RE
.TP
.B \f[C]-A\f[] \f[I]FILE\f[],
\f[C]--include-after-body=\f[]\f[I]FILE\f[]
Include contents of \f[I]FILE\f[], verbatim, at the end of the document
body (before the \f[C]</body>\f[] tag in HTML, or the
\f[C]\\end{document}\f[] command in LaTeX).
This option can be be used repeatedly to include multiple files.
They will be included in the order specified.
Implies \f[C]--standalone\f[].
.RS
.RE
.TP
.B \f[C]--reference-odt=\f[]\f[I]FILE\f[]
Use the specified file as a style reference in producing an ODT.
For best results, the reference ODT should be a modified version of an
ODT produced using pandoc.
The contents of the reference ODT are ignored, but its stylesheets are
used in the new ODT.
If no reference ODT is specified on the command line, pandoc will look
for a file \f[C]reference.odt\f[] in the user data directory (see
\f[C]--data-dir\f[]).
If this is not found either, sensible defaults will be used.
.RS
.RE
.TP
.B \f[C]--epub-stylesheet=\f[]\f[I]FILE\f[]
Use the specified CSS file to style the EPUB.
If no stylesheet is specified, pandoc will look for a file
\f[C]epub.css\f[] in the user data directory (see \f[C]--data-dir\f[],
below).
If it is not found there, sensible defaults will be used.
.RS
.RE
.TP
.B \f[C]--epub-cover-image=\f[]\f[I]FILE\f[]
Use the specified image as the EPUB cover.
It is recommended that the image be less than 1000px in width and
height.
.RS
.RE
.TP
.B \f[C]--epub-metadata=\f[]\f[I]FILE\f[]
Look in the specified XML file for metadata for the EPUB.
The file should contain a series of Dublin Core elements, as documented
at \f[C]http://dublincore.org/documents/dces/\f[].
For example:
.RS
.IP
.nf
\f[C]
\ <dc:rights>Creative\ Commons</dc:rights>
\ <dc:language>es-AR</dc:language>
\f[]
.fi
.PP
By default, pandoc will include the following metadata elements:
\f[C]<dc:title>\f[] (from the document title), \f[C]<dc:creator>\f[]
(from the document authors), \f[C]<dc:language>\f[] (from the locale),
and \f[C]<dc:identifier\ id="BookId">\f[] (a randomly generated UUID).
Any of these may be overridden by elements in the metadata file.
.RE
.TP
.B \f[C]-D\f[] \f[I]FORMAT\f[],
\f[C]--print-default-template=\f[]\f[I]FORMAT\f[]
Print the default template for an output \f[I]FORMAT\f[].
(See \f[C]-t\f[] for a list of possible \f[I]FORMAT\f[]s.)
.RS
.RE
.TP
.B \f[C]-T\f[] \f[I]STRING\f[], \f[C]--title-prefix=\f[]\f[I]STRING\f[]
Specify \f[I]STRING\f[] as a prefix at the beginning of the title that
appears in the HTML header (but not in the title as it appears at the
beginning of the HTML body).
Implies \f[C]--standalone\f[].
.RS
.RE
.TP
.B \f[C]--bibliography=\f[]\f[I]FILE\f[]
Specify bibliography database to be used in resolving citations.
The database type will be determined from the extension of
\f[I]FILE\f[], which may be \f[C].mods\f[] (MODS format), \f[C].bib\f[]
(BibTeX format), \f[C].bbx\f[] (BibLaTeX format), \f[C].ris\f[] (RIS
format), \f[C].enl\f[] (EndNote format), \f[C].xml\f[] (EndNote XML
format), \f[C].wos\f[] (ISI format), \f[C].medline\f[] (MEDLINE format),
\f[C].copac\f[] (Copac format), or \f[C].json\f[] (citeproc JSON).
If you want to use multiple bibliographies, just use this option
repeatedly.
.RS
.RE
.TP
.B \f[C]--csl=\f[]\f[I]FILE\f[]
Specify CSL style to be used in formatting citations and the
bibliography.
If \f[I]FILE\f[] is not found, pandoc will look for it in
.RS
.IP
.nf
\f[C]
$HOME/.csl
\f[]
.fi
.PP
in unix and
.IP
.nf
\f[C]
C:\\Documents\ And\ Settings\\USERNAME\\Application\ Data\\csl
\f[]
.fi
.PP
in Windows.
If the \f[C]--csl\f[] option is not specified, pandoc will use a default
style: either \f[C]default.csl\f[] in the user data directory (see
\f[C]--data-dir\f[]), or, if that is not present, the Chicago
author-date style.
.RE
.TP
.B \f[C]--natbib\f[]
Use natbib for citations in LaTeX output.
.RS
.RE
.TP
.B \f[C]--biblatex\f[]
Use biblatex for citations in LaTeX output.
.RS
.RE
.TP
.B \f[C]--data-dir=\f[]\f[I]DIRECTORY\f[]
Specify the user data directory to search for pandoc data files.
If this option is not specified, the default user data directory will be
used:
.RS
.IP
.nf
\f[C]
$HOME/.pandoc
\f[]
.fi
.PP
in unix and
.IP
.nf
\f[C]
C:\\Documents\ And\ Settings\\USERNAME\\Application\ Data\\pandoc
\f[]
.fi
.PP
in Windows.
A \f[C]reference.odt\f[], \f[C]epub.css\f[], \f[C]templates\f[]
directory, or \f[C]s5\f[] directory placed in this directory will
override pandoc\[aq]s normal defaults.
.RE
.TP
.B \f[C]--dump-args\f[]
Print information about command-line arguments to \f[I]stdout\f[], then
exit.
This option is intended primarily for use in wrapper scripts.
The first line of output contains the name of the output file specified
with the \f[C]-o\f[] option, or \f[C]-\f[] (for \f[I]stdout\f[]) if no
output file was specified.
The remaining lines contain the command-line arguments, one per line, in
the order they appear.
These do not include regular Pandoc options and their arguments, but do
include any options appearing after a \f[C]--\f[] separator at the end
of the line.
.RS
.RE
.TP
.B \f[C]--ignore-args\f[]
Ignore command-line arguments (for use in wrapper scripts).
Regular Pandoc options are not ignored.
Thus, for example,
.RS
.IP
.nf
\f[C]
pandoc\ --ignore-args\ -o\ foo.html\ -s\ foo.txt\ --\ -e\ latin1
\f[]
.fi
.PP
is equivalent to
.IP
.nf
\f[C]
pandoc\ -o\ foo.html\ -s
\f[]
.fi
.RE
.TP
.B \f[C]-v\f[], \f[C]--version\f[]
Print version.
.RS
.RE
.TP
.B \f[C]-h\f[], \f[C]--help\f[]
Show usage message.
.RS
.RE
.SH TEMPLATES
.PP
When the \f[C]-s/--standalone\f[] option is used, pandoc uses a template
to add header and footer material that is needed for a self-standing
document.
To see the default template that is used, just type
.IP
.nf
\f[C]
pandoc\ -D\ FORMAT
\f[]
.fi
.PP
where \f[C]FORMAT\f[] is the name of the output format.
A custom template can be specified using the \f[C]--template\f[] option.
You can also override the system default templates for a given output
format \f[C]FORMAT\f[] by putting a file
\f[C]templates/default.FORMAT\f[] in the user data directory (see
\f[C]--data-dir\f[], above).
.PP
Templates may contain \f[I]variables\f[].
Variable names are sequences of alphanumerics, \f[C]-\f[], and
\f[C]_\f[], starting with a letter.
A variable name surrounded by \f[C]$\f[] signs will be replaced by its
value.
For example, the string \f[C]$title$\f[] in
.IP
.nf
\f[C]
<title>$title$</title>
\f[]
.fi
.PP
will be replaced by the document title.
.PP
To write a literal \f[C]$\f[] in a template, use \f[C]$$\f[].
.PP
Some variables are set automatically by pandoc.
These vary somewhat depending on the output format, but include:
.TP
.B \f[C]header-includes\f[]
contents specified by \f[C]-H/--include-in-header\f[] (may have multiple
values)
.RS
.RE
.TP
.B \f[C]toc\f[]
non-null value if \f[C]--toc/--table-of-contents\f[] was specified
.RS
.RE
.TP
.B \f[C]include-before\f[]
contents specified by \f[C]-B/--include-before-body\f[] (may have
multiple values)
.RS
.RE
.TP
.B \f[C]include-after\f[]
contents specified by \f[C]-A/--include-after-body\f[] (may have
multiple values)
.RS
.RE
.TP
.B \f[C]body\f[]
body of document
.RS
.RE
.TP
.B \f[C]title\f[]
title of document, as specified in title block
.RS
.RE
.TP
.B \f[C]author\f[]
author of document, as specified in title block (may have multiple
values)
.RS
.RE
.TP
.B \f[C]date\f[]
date of document, as specified in title block
.RS
.RE
.TP
.B \f[C]lang\f[]
language code for HTML documents
.RS
.RE
.TP
.B \f[C]slidy-url\f[]
base URL for Slidy documents (defaults to
\f[C]http://www.w3.org/Talks/Tools/Slidy2\f[])
.RS
.RE
.TP
.B \f[C]s5-url\f[]
base URL for S5 documents (defaults to \f[C]ui/default\f[])
.RS
.RE
.PP
Variables may be set at the command line using the
\f[C]-V/--variable\f[] option.
This allows users to include custom variables in their templates.
.PP
Templates may contain conditionals.
The syntax is as follows:
.IP
.nf
\f[C]
$if(variable)$
X
$else$
Y
$endif$
\f[]
.fi
.PP
This will include \f[C]X\f[] in the template if \f[C]variable\f[] has a
non-null value; otherwise it will include \f[C]Y\f[].
\f[C]X\f[] and \f[C]Y\f[] are placeholders for any valid template text,
and may include interpolated variables or other conditionals.
The \f[C]$else$\f[] section may be omitted.
.PP
When variables can have multiple values (for example, \f[C]author\f[] in
a multi-author document), you can use the \f[C]$for$\f[] keyword:
.IP
.nf
\f[C]
$for(author)$
<meta\ name="author"\ content="$author$"\ />
$endfor$
\f[]
.fi
.PP
You can optionally specify a separator to be used between consecutive
items:
.IP
.nf
\f[C]
$for(author)$$author$$sep$,\ $endfor$
\f[]
.fi
.PP
If you use custom templates, you may need to revise them as pandoc
changes.
We recommend tracking the changes in the default templates, and
modifying your custom templates accordingly.
An easy way to do this is to fork the pandoc-templates repository
(\f[C]http://github.com/jgm/pandoc-templates\f[]) and merge in changes
after each pandoc release.
.SH PRODUCING HTML SLIDE SHOWS WITH PANDOC
.PP
You can use Pandoc to produce an HTML + javascript slide presentation
that can be viewed via a web browser.
There are two ways to do this, using S5 or Slidy.
.PP
Here\[aq]s the markdown source for a simple slide show,
\f[C]eating.txt\f[]:
.IP
.nf
\f[C]
%\ Eating\ Habits
%\ John\ Doe
%\ March\ 22,\ 2005

#\ In\ the\ morning

-\ Eat\ eggs
-\ Drink\ coffee

#\ In\ the\ evening

-\ Eat\ spaghetti
-\ Drink\ wine

--------------------------

![picture\ of\ spaghetti](images/spaghetti.jpg)
\f[]
.fi
.PP
To produce the slide show, simply type
.IP
.nf
\f[C]
pandoc\ -w\ s5\ -s\ eating.txt\ >\ eating.html
\f[]
.fi
.PP
for S5, or
.IP
.nf
\f[C]
pandoc\ -w\ slidy\ -s\ eating.txt\ >\ eating.html
\f[]
.fi
.PP
for Slidy.
.PP
A title page is constructed automatically from the document\[aq]s title
block.
Each level-one header and horizontal rule begins a new slide.
.PP
The file produced by pandoc with the \f[C]-s/--standalone\f[] option
embeds a link to javascripts and CSS files, which are assumed to be
available at the relative path \f[C]ui/default\f[] (for S5) or at the
Slidy website at \f[C]w3.org\f[] (for Slidy).
(These paths can be changed by setting the \f[C]slidy-url\f[] or
\f[C]s5-url\f[] variables; see \f[C]--variable\f[], above.)
 If the \f[C]--offline\f[] option is specified, the scripts and CSS will
be included directly in the generated file, so that it may be used
offline.
.PP
You can change the style of the slides by putting customized CSS files
in \f[C]$DATADIR/s5/default\f[] (for S5) or \f[C]$DATADIR/slidy\f[] (for
Slidy), where \f[C]$DATADIR\f[] is the user data directory (see
\f[C]--data-dir\f[], above).
The originals may be found in pandoc\[aq]s system data directory
(generally \f[C]$CABALDIR/pandoc-VERSION/s5/default\f[]).
Pandoc will look there for any files it does not find in the user data
directory.
.SS Incremental lists
.PP
By default, these writers produces lists that display "all at once." If
you want your lists to display incrementally (one item at a time), use
the \f[C]-i\f[] option.
If you want a particular list to depart from the default (that is, to
display incrementally without the \f[C]-i\f[] option and all at once
with the \f[C]-i\f[] option), put it in a block quote:
.IP
.nf
\f[C]
>\ -\ Eat\ spaghetti
>\ -\ Drink\ wine
\f[]
.fi
.PP
In this way incremental and nonincremental lists can be mixed in a
single document.
.SH LITERATE HASKELL SUPPORT
.PP
If you append \f[C]+lhs\f[] to an appropriate input or output format
(\f[C]markdown\f[], \f[C]rst\f[], or \f[C]latex\f[] for input or output;
\f[C]html\f[] for output only), pandoc will treat the document as
literate Haskell source.
This means that
.IP \[bu] 2
In markdown input, "bird track" sections will be parsed as Haskell code
rather than block quotations.
Text between \f[C]\\begin{code}\f[] and \f[C]\\end{code}\f[] will also
be treated as Haskell code.
.IP \[bu] 2
In markdown output, code blocks with class \f[C]haskell\f[] will be
rendered using bird tracks, and block quotations will be indented one
space, so they will not be treated as Haskell code.
In addition, headers will be rendered setext-style (with underlines)
rather than atx-style (with \[aq]#\[aq] characters).
(This is because ghc treats \[aq]#\[aq] characters in column 1 as
introducing line numbers.)
.IP \[bu] 2
In restructured text input, "bird track" sections will be parsed as
Haskell code.
.IP \[bu] 2
In restructured text output, code blocks with class \f[C]haskell\f[]
will be rendered using bird tracks.
.IP \[bu] 2
In LaTeX input, text in \f[C]code\f[] environments will be parsed as
Haskell code.
.IP \[bu] 2
In LaTeX output, code blocks with class \f[C]haskell\f[] will be
rendered inside \f[C]code\f[] environments.
.IP \[bu] 2
In HTML output, code blocks with class \f[C]haskell\f[] will be rendered
with class \f[C]literatehaskell\f[] and bird tracks.
.PP
Examples:
.IP
.nf
\f[C]
pandoc\ -f\ markdown+lhs\ -t\ html
\f[]
.fi
.PP
reads literate Haskell source formatted with markdown conventions and
writes ordinary HTML (without bird tracks).
.IP
.nf
\f[C]
pandoc\ -f\ markdown+lhs\ -t\ html+lhs
\f[]
.fi
.PP
writes HTML with the Haskell code in bird tracks, so it can be copied
and pasted as literate Haskell source.
.SH AUTHORS
.PP
© 2006-2011 John MacFarlane (jgm at berkeley dot edu).
Released under the GPL, version 2 or greater.
This software carries no warranty of any kind.
(See COPYRIGHT for full copyright and warranty notices.)
 Other contributors include Recai Oktaş, Paulo Tanimoto, Peter Wang,
Andrea Rossato, Eric Kow, infinity0x, Luke Plant, shreevatsa.public,
Puneeth Chaganti, Paul Rivier, rodja.trappe, Bradley Kuhn, thsutton,
Nathan Gass, Jonathan Daugherty, Jérémy Bobbio, Justin Bogner, qerub,
Christopher Sawicki, Kelsey Hightower.
.SH PANDOC'S MARKDOWN
For a complete description of pandoc's extensions to standard markdown,
see \f[C]pandoc_markdown\f[] (5).
.SH SEE ALSO
.PP
\f[C]markdown2pdf\f[] (1), \f[C]pandoc_markdown\f[] (5).
.PP
The Pandoc source code and all documentation may be downloaded
from <http://johnmacfarlane.net/pandoc/>.
